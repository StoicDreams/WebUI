function get_uuid(){try{return crypto.randomUUID()}catch(ex){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(c){let r=16*Math.random()|0;return("x"==c?r:3&r|8).toString(16)}))}}self.addEventListener("install",(event=>event.waitUntil(onInstall(event)))),self.addEventListener("activate",(event=>event.waitUntil(onActivate(event)))),self.addEventListener("fetch",(event=>event.respondWith(onFetch(event))));const currentVersion=location.host.startsWith("localhost")?`${get_uuid()}`:"webui_0.10.8",cacheNamePrefix="offline-cache-",cacheName=`${cacheNamePrefix}${currentVersion}`,offlineAssetsInclude=[/\.wasm/,/\.html/,/\.js$/,/\.json$/,/\.css$/,/\.woff$/,/\.png$/,/\.jpe?g$/,/\.gif$/,/\.ico$/],offlineAssetsExclude=[/^service-worker\.js$/];async function onInstall(event){console.info(`Service worker: Install ${cacheName}`),self.skipWaiting()}async function onActivate(event){console.info(`Service worker: Activate ${cacheName}`);const cacheKeys=await caches.keys();await Promise.all(cacheKeys.filter((key=>key.startsWith(cacheNamePrefix)&&key!==cacheName)).map((key=>caches.delete(key))))}async function onFetch(event){let cachedResponse=null;if(allowCache(event.request)){const cache=await caches.open(cacheName);cachedResponse=await cache.match(event.request)}return cachedResponse||fetch(event.request)}function allowCache(request){return"GET"===request.method&&"navigate"!==request.mode}

function get_uuid(){try{return crypto.randomUUID()}catch(ex){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(c){let r=16*Math.random()|0;return("x"==c?r:3&r|8).toString(16)}))}}self.addEventListener("install",(event=>event.waitUntil(onInstall(event)))),self.addEventListener("activate",(event=>event.waitUntil(onActivate(event)))),self.addEventListener("fetch",(event=>event.respondWith(onFetch(event))));const cacheNamePrefix="offline-cache",cachePostfix=location.host.startsWith("localhost")?`_${get_uuid()}`:"_ts_2507081608",cacheName=`${cacheNamePrefix}${cachePostfix}`,cdnCacheTimestamps=new Map,CACHE_REFRESH_INTERVAL=36e5;async function onInstall(event){console.info(`Service worker: Install ${cacheName}`),self.skipWaiting()}async function onActivate(event){console.info(`Service worker: Activate ${cacheName}`);const cacheKeys=await caches.keys();await Promise.all(cacheKeys.filter((key=>key.startsWith(cacheNamePrefix)&&key!==cacheName)).map((key=>caches.delete(key))))}async function onFetch(event){const request=event.request,url=new URL(request.url);if("api.myfi.ws"===url.hostname)return fetch(request,{cache:"no-store"});if("cdn.myfi.ws"===url.hostname&&"GET"===request.method){const cache=await caches.open(cacheName),cachedResponse=await cache.match(request),now=Date.now(),lastFetched=cdnCacheTimestamps.get(request.url)||0;if(cachedResponse&&now-lastFetched<CACHE_REFRESH_INTERVAL)return cachedResponse;try{const freshResponse=await fetch(request);return freshResponse.ok&&(cache.put(request,freshResponse.clone()),cdnCacheTimestamps.set(request.url,now)),freshResponse}catch(error){return cachedResponse||Response.error()}}return fetch(request)}